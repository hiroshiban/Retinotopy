function [XY,colors]=GetDotPositionsRDS(checkerboard,depths,dotdense,RDScolors,ipd,vdist,pix_per_cm)

% Returns XY positions and colors (grayscale, 0-255) of dots in a Random-Dot-Stereogram(RDS) image.
% function [XY,colors]=GetDotPositionsRDS(checkerboard,depths,:dotdense,:RDScolors,:ipd,:vdist,:pix_per_cm)
% (: is optional)
%
% This function returns XY positions and grayscale colors of dots in a Random-Dot-Stereogram(RDS) image.
%
% [input]
% checkerboard : checkerboard pattern generated by pol_checkerboardID, and bar_GenerateCheckerBar1D etc.
% depths       : disparities (arcmin) [depth1, depth2, depth3,...], corresponding to the subregions of
%                the input checkerboard whose indices are 1,2,3,.... A negative(positive) value is near(far) depth.
% dotdense     : (optional) density of dots in a RDS, [percentage], 5 by default.
% RDScolors    : (optional) grayscale colors, a [1 x 2 (dot1 and dot2)] matrix. [0,255] by default.
% ipd          : (optional) inter pupil distance in cm, 6.5 by default.
% vdist        : (optional) viewing distance in cm, 96 by default.
% pix_per_cm   : (optional) pixels_per_cm, 38.4 by default.
%
% [output]
% XY           : xy coordinates of dots in a RDS. a cell structure, xy{2(left and right)}(2(row,col) x #dots).
% colors       : grayscale colors of dots in a RDS. a cell structure, colors{2}(3(RGB) x #dots)
%
%
% Created    : "2019-05-21 12:40:12 ban"
% Last Update: "2019-05-23 15:00:55 ban"

% check the input variables.
if nargin<2, help(mfilename()); return; end
if nargin<3 || isempty(dotdense), dotdense=5; end
if nargin<4 || isempty(RDScolors), RDScolors=[0,255]; end
if nargin<5 || isempty(ipd), ipd=6.5; end
if nargin<6 || isempty(vdist), vdist=96; end
if nargin<7 || isempty(pix_per_cm), pix_per_cm=38.4; end

% generate the base random dot image
timg=double(rand(size(checkerboard))<=dotdense/100);

% get the dot positions and set IDs for assigning dot colors consistently over the left and right-eye images
cidx=find(timg==1);
timg(cidx)=ceil(4*rand([numel(cidx),1]));

% compute the positional shifts according to the provided disparity values.
pos=cell(2,1);
zdist=CalcDistFromDisparity(ipd,depths,vdist); % [0,min,max]
[pos{1},pos{2}]=RayTrace_ScreenPos_X_MEX(zdist,ipd,vdist,pix_per_cm,0); % pos{1}=[1x3(0,depth1,depth2)]

% get dot shifts for generating a RDS image
for pp=1:1:2 % left and right eyes
  img=zeros(size(timg));
  for ii=0:1:numel(depths)-1 % checkerboard index
    if pos{pp}(ii+1)>0
      tmp=timg(:,[size(timg,2)-pos{pp}(ii+1)+1:size(timg,2),1:size(timg,2)-pos{pp}(ii+1)]);
    else
      tmp=timg(:,[1-pos{pp}(ii+1):size(timg,2),1:-pos{pp}(ii+1)]);
    end
    img(checkerboard==ii)=tmp(checkerboard==ii);
  end

  t1=find(img==1);
  t2=find(img==2);
  t3=find(img==3);
  t4=find(img==4);
  [XY{pp}(:,2),XY{pp}(:,1)]=ind2sub(size(checkerboard),[t1;t2;t3;t4]);

  XY{pp}=XY{pp}';
  colors{pp}=[repmat(RDScolors(1),[3,size(t1,1)]),repmat(RDScolors(2),[3,size(t2,1)]),...
              repmat(RDScolors(1),[3,size(t3,1)]),repmat(RDScolors(2),[3,size(t4,1)])];
end

return
